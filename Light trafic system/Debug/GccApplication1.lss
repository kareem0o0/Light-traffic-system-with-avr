
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000084a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  0000084a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000084a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001507  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000916  00000000  00000000  00001ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bae  00000000  00000000  0000280d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  000033bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f1  00000000  00000000  00003624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092d  00000000  00000000  00003e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004742  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ff 01 	call	0x3fe	; 0x3fe <main>
  74:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <App_TurnOn5SLed>:
	MTimer0_init(0);
	HLED_LedOn(&L1);   HLED_LedOn(&L2);
	MTimer0_Delay_14_equal_second(70);
	HLED_LedOff(&L1);  HLED_LedOff(&L2);
	return works;
}
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <App_TurnOn5SLed+0x6>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	9a 83       	std	Y+2, r25	; 0x02
  88:	89 83       	std	Y+1, r24	; 0x01
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 c2 03 	call	0x784	; 0x784 <MTimer0_init>
  90:	ce 01       	movw	r24, r28
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	0e 94 ef 01 	call	0x3de	; 0x3de <HLED_LedOn>
  98:	86 e4       	ldi	r24, 0x46	; 70
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 c6 03 	call	0x78c	; 0x78c <MTimer0_Delay_14_equal_second>
  a0:	ce 01       	movw	r24, r28
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <HLED_LedOff>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0f 90       	pop	r0
  ac:	0f 90       	pop	r0
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <App_TurnOn5S_blinkLed>:
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	00 d0       	rcall	.+0      	; 0xbe <App_TurnOn5S_blinkLed+0xa>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	9a 83       	std	Y+2, r25	; 0x02
  c4:	89 83       	std	Y+1, r24	; 0x01
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 c2 03 	call	0x784	; 0x784 <MTimer0_init>
  cc:	00 e0       	ldi	r16, 0x00	; 0
  ce:	10 e0       	ldi	r17, 0x00	; 0
  d0:	12 c0       	rjmp	.+36     	; 0xf6 <App_TurnOn5S_blinkLed+0x42>
  d2:	ce 01       	movw	r24, r28
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	0e 94 ef 01 	call	0x3de	; 0x3de <HLED_LedOn>
  da:	88 e0       	ldi	r24, 0x08	; 8
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 c6 03 	call	0x78c	; 0x78c <MTimer0_Delay_14_equal_second>
  e2:	ce 01       	movw	r24, r28
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <HLED_LedOff>
  ea:	88 e0       	ldi	r24, 0x08	; 8
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 c6 03 	call	0x78c	; 0x78c <MTimer0_Delay_14_equal_second>
  f2:	0f 5f       	subi	r16, 0xFF	; 255
  f4:	1f 4f       	sbci	r17, 0xFF	; 255
  f6:	05 30       	cpi	r16, 0x05	; 5
  f8:	11 05       	cpc	r17, r1
  fa:	5c f3       	brlt	.-42     	; 0xd2 <App_TurnOn5S_blinkLed+0x1e>
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	1f 91       	pop	r17
 108:	0f 91       	pop	r16
 10a:	08 95       	ret

0000010c <App_TurnOn_5S_2blinkLeds>:
state App_TurnOn_5S_2blinkLeds(LED_t L1, LED_t L2)	// blink the 2 leds for only 5 seconds
{
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	00 d0       	rcall	.+0      	; 0x116 <App_TurnOn_5S_2blinkLeds+0xa>
 116:	00 d0       	rcall	.+0      	; 0x118 <App_TurnOn_5S_2blinkLeds+0xc>
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	9a 83       	std	Y+2, r25	; 0x02
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	7c 83       	std	Y+4, r23	; 0x04
 122:	6b 83       	std	Y+3, r22	; 0x03
	MTimer0_init(0);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 c2 03 	call	0x784	; 0x784 <MTimer0_init>
	for(int i=0;i<5;i++)
 12a:	00 e0       	ldi	r16, 0x00	; 0
 12c:	10 e0       	ldi	r17, 0x00	; 0
 12e:	1a c0       	rjmp	.+52     	; 0x164 <App_TurnOn_5S_2blinkLeds+0x58>
	{ 
		HLED_LedOn(&L1);   HLED_LedOn(&L2);
 130:	ce 01       	movw	r24, r28
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	0e 94 ef 01 	call	0x3de	; 0x3de <HLED_LedOn>
 138:	ce 01       	movw	r24, r28
 13a:	03 96       	adiw	r24, 0x03	; 3
 13c:	0e 94 ef 01 	call	0x3de	; 0x3de <HLED_LedOn>
		MTimer0_Delay_14_equal_second(8);
 140:	88 e0       	ldi	r24, 0x08	; 8
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 c6 03 	call	0x78c	; 0x78c <MTimer0_Delay_14_equal_second>
		HLED_LedOff(&L1);  HLED_LedOff(&L2);
 148:	ce 01       	movw	r24, r28
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <HLED_LedOff>
 150:	ce 01       	movw	r24, r28
 152:	03 96       	adiw	r24, 0x03	; 3
 154:	0e 94 f7 01 	call	0x3ee	; 0x3ee <HLED_LedOff>
		MTimer0_Delay_14_equal_second(8);
 158:	88 e0       	ldi	r24, 0x08	; 8
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 c6 03 	call	0x78c	; 0x78c <MTimer0_Delay_14_equal_second>
	return works;
}
state App_TurnOn_5S_2blinkLeds(LED_t L1, LED_t L2)	// blink the 2 leds for only 5 seconds
{
	MTimer0_init(0);
	for(int i=0;i<5;i++)
 160:	0f 5f       	subi	r16, 0xFF	; 255
 162:	1f 4f       	sbci	r17, 0xFF	; 255
 164:	05 30       	cpi	r16, 0x05	; 5
 166:	11 05       	cpc	r17, r1
 168:	1c f3       	brlt	.-58     	; 0x130 <App_TurnOn_5S_2blinkLeds+0x24>
		MTimer0_Delay_14_equal_second(8);
		HLED_LedOff(&L1);  HLED_LedOff(&L2);
		MTimer0_Delay_14_equal_second(8);
	}
	return works;
}
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	08 95       	ret

0000017e <AppStart>:
state AppStart()
{

	// INITIALIZING CAR TRAFFIC LIGHT LEDS

	CarsGreenLed.port = PORT_A;
 17e:	c6 e6       	ldi	r28, 0x66	; 102
 180:	d0 e0       	ldi	r29, 0x00	; 0
 182:	18 82       	st	Y, r1
	CarsYellowLed.port = PORT_A;
 184:	ae e6       	ldi	r26, 0x6E	; 110
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	1c 92       	st	X, r1
	CarsRedLed.port = PORT_A;
 18a:	ea e6       	ldi	r30, 0x6A	; 106
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	10 82       	st	Z, r1
	CarsGreenLed.pin = 0;
 190:	19 82       	std	Y+1, r1	; 0x01
    CarsYellowLed.pin = 1;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	11 96       	adiw	r26, 0x01	; 1
 196:	8c 93       	st	X, r24
	CarsRedLed.pin = 2;
 198:	92 e0       	ldi	r25, 0x02	; 2
 19a:	91 83       	std	Z+1, r25	; 0x01
	
	// INITIALIZING PEDESTRIAN TRAFFIC LIGHT LEDS
	PEDGreenLed.port = PORT_B;
 19c:	cc e6       	ldi	r28, 0x6C	; 108
 19e:	d0 e0       	ldi	r29, 0x00	; 0
 1a0:	88 83       	st	Y, r24
	PEDYellowLed.port = PORT_B; 
 1a2:	a4 e6       	ldi	r26, 0x64	; 100
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	8c 93       	st	X, r24
	PEDRedLed.port = PORT_B;
 1a8:	e8 e6       	ldi	r30, 0x68	; 104
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 83       	st	Z, r24
	PEDGreenLed.pin = 0; 
 1ae:	19 82       	std	Y+1, r1	; 0x01
	PEDYellowLed.pin = 1; 
 1b0:	11 96       	adiw	r26, 0x01	; 1
 1b2:	8c 93       	st	X, r24
	PEDRedLed.pin = 2;
 1b4:	91 83       	std	Z+1, r25	; 0x01
	
	// initializing the LEDS for the cars traffic light
	HLED_voidInit(&CarsGreenLed);  
 1b6:	86 e6       	ldi	r24, 0x66	; 102
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 e7 01 	call	0x3ce	; 0x3ce <HLED_voidInit>
	HLED_voidInit(&CarsYellowLed);  
 1be:	8e e6       	ldi	r24, 0x6E	; 110
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <HLED_voidInit>
	HLED_voidInit(&CarsRedLed);
 1c6:	8a e6       	ldi	r24, 0x6A	; 106
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 e7 01 	call	0x3ce	; 0x3ce <HLED_voidInit>
	
	// initializing the LEDS for the Pedestrians traffic light
	HLED_voidInit(&PEDGreenLed);  
 1ce:	ce 01       	movw	r24, r28
 1d0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <HLED_voidInit>
	HLED_voidInit(&PEDYellowLed);  
 1d4:	84 e6       	ldi	r24, 0x64	; 100
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <HLED_voidInit>
	HLED_voidInit(&PEDRedLed);
 1dc:	88 e6       	ldi	r24, 0x68	; 104
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <HLED_voidInit>
	
	// initializing Timer0 counter register with 0 value 
	MTimer0_init(0);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 c2 03 	call	0x784	; 0x784 <MTimer0_init>
	
	
	MINTERRUPT_voidExternal_Interrupt_SetTrigger(EXTERNAL_INT_LINE0,FALLING_EDGE_TRIG);
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 ae 03 	call	0x75c	; 0x75c <MINTERRUPT_voidExternal_Interrupt_SetTrigger>
	MINTERRUPT_voidEnableExternalInterrupt(EXTERNAL_INT_LINE0);
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 9d 03 	call	0x73a	; 0x73a <MINTERRUPT_voidEnableExternalInterrupt>
	INTERRUPT_Global_Enable ;
 1f8:	8f b7       	in	r24, 0x3f	; 63
 1fa:	80 68       	ori	r24, 0x80	; 128
 1fc:	8f bf       	out	0x3f, r24	; 63
	
	
	
	while(1)
	{
		 App_TurnOn5SLed(CarsGreenLed);
 1fe:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <CarsGreenLed>
 202:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <CarsGreenLed+0x1>
 206:	0e 94 3e 00 	call	0x7c	; 0x7c <App_TurnOn5SLed>
		 App_TurnOn5S_blinkLed(CarsYellowLed);
 20a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <CarsYellowLed>
 20e:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <CarsYellowLed+0x1>
 212:	0e 94 5a 00 	call	0xb4	; 0xb4 <App_TurnOn5S_blinkLed>
		 App_TurnOn5SLed(CarsRedLed);
 216:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <CarsRedLed>
 21a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <CarsRedLed+0x1>
 21e:	0e 94 3e 00 	call	0x7c	; 0x7c <App_TurnOn5SLed>
		 App_TurnOn5S_blinkLed(CarsYellowLed);
 222:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <CarsYellowLed>
 226:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <CarsYellowLed+0x1>
 22a:	0e 94 5a 00 	call	0xb4	; 0xb4 <App_TurnOn5S_blinkLed>
 22e:	e7 cf       	rjmp	.-50     	; 0x1fe <AppStart+0x80>

00000230 <__vector_1>:
}



ISR (VECTOR_ISR_EX0)   // when the button is pushed 
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
	MTimer0_init(0);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 c2 03 	call	0x784	; 0x784 <MTimer0_init>
	if (MDIO_GetPinValue(PORT_D,2) == HIGH)
 258:	62 e0       	ldi	r22, 0x02	; 2
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 6f 03 	call	0x6de	; 0x6de <MDIO_GetPinValue>
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	21 f4       	brne	.+8      	; 0x270 <__vector_1+0x40>
	{
		Long_Press = 1 ;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 26e:	02 c0       	rjmp	.+4      	; 0x274 <__vector_1+0x44>
	}  
	else 
	{ 
		Long_Press = 0 ; 
 270:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
		
	if (MDIO_GetPinValue(PORT_A, 2) == HIGH && Long_Press == 0 )
 274:	62 e0       	ldi	r22, 0x02	; 2
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 6f 03 	call	0x6de	; 0x6de <MDIO_GetPinValue>
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	d9 f5       	brne	.+118    	; 0x2fa <__vector_1+0xca>
 284:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 288:	81 11       	cpse	r24, r1
 28a:	37 c0       	rjmp	.+110    	; 0x2fa <__vector_1+0xca>
	{
		HLED_LedOn(&PEDGreenLed);
 28c:	8c e6       	ldi	r24, 0x6C	; 108
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 ef 01 	call	0x3de	; 0x3de <HLED_LedOn>
		App_TurnOn5SLed(CarsRedLed);
 294:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <CarsRedLed>
 298:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <CarsRedLed+0x1>
 29c:	0e 94 3e 00 	call	0x7c	; 0x7c <App_TurnOn5SLed>
		HLED_LedOff(&CarsRedLed);
 2a0:	8a e6       	ldi	r24, 0x6A	; 106
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <HLED_LedOff>
		App_TurnOn_5S_2blinkLeds(CarsYellowLed,PEDYellowLed);
 2a8:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <PEDYellowLed>
 2ac:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <PEDYellowLed+0x1>
 2b0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <CarsYellowLed>
 2b4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <CarsYellowLed+0x1>
 2b8:	0e 94 86 00 	call	0x10c	; 0x10c <App_TurnOn_5S_2blinkLeds>
		HLED_LedOff(&PEDGreenLed);
 2bc:	8c e6       	ldi	r24, 0x6C	; 108
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <HLED_LedOff>
		HLED_LedOn(&PEDRedLed);
 2c4:	88 e6       	ldi	r24, 0x68	; 104
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 ef 01 	call	0x3de	; 0x3de <HLED_LedOn>
		App_TurnOn5SLed(CarsGreenLed);
 2cc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <CarsGreenLed>
 2d0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <CarsGreenLed+0x1>
 2d4:	0e 94 3e 00 	call	0x7c	; 0x7c <App_TurnOn5SLed>
		HLED_LedOff(&PEDRedLed);
 2d8:	88 e6       	ldi	r24, 0x68	; 104
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 f7 01 	call	0x3ee	; 0x3ee <HLED_LedOff>
		App_TurnOn5SLed(CarsYellowLed);
 2e0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <CarsYellowLed>
 2e4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <CarsYellowLed+0x1>
 2e8:	0e 94 3e 00 	call	0x7c	; 0x7c <App_TurnOn5SLed>
		App_TurnOn5SLed(CarsRedLed);
 2ec:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <CarsRedLed>
 2f0:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <CarsRedLed+0x1>
 2f4:	0e 94 3e 00 	call	0x7c	; 0x7c <App_TurnOn5SLed>
 2f8:	59 c0       	rjmp	.+178    	; 0x3ac <__vector_1+0x17c>
	}
		
	else if ((MDIO_GetPinValue(PORT_A, 0) == 1 || MDIO_GetPinValue(PORT_A, 1) == 1)&& Long_Press == 0 )
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 6f 03 	call	0x6de	; 0x6de <MDIO_GetPinValue>
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	49 f0       	breq	.+18     	; 0x31c <__vector_1+0xec>
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 6f 03 	call	0x6de	; 0x6de <MDIO_GetPinValue>
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	09 f0       	breq	.+2      	; 0x31c <__vector_1+0xec>
 31a:	48 c0       	rjmp	.+144    	; 0x3ac <__vector_1+0x17c>
 31c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 320:	81 11       	cpse	r24, r1
 322:	44 c0       	rjmp	.+136    	; 0x3ac <__vector_1+0x17c>
		{
			HLED_LedOff(&CarsGreenLed);  HLED_LedOff(&CarsYellowLed);
 324:	86 e6       	ldi	r24, 0x66	; 102
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 f7 01 	call	0x3ee	; 0x3ee <HLED_LedOff>
 32c:	8e e6       	ldi	r24, 0x6E	; 110
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 f7 01 	call	0x3ee	; 0x3ee <HLED_LedOff>
			HLED_LedOn(&PEDRedLed);
 334:	88 e6       	ldi	r24, 0x68	; 104
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 ef 01 	call	0x3de	; 0x3de <HLED_LedOn>
			App_TurnOn_5S_2blinkLeds(CarsYellowLed,PEDYellowLed);
 33c:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <PEDYellowLed>
 340:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <PEDYellowLed+0x1>
 344:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <CarsYellowLed>
 348:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <CarsYellowLed+0x1>
 34c:	0e 94 86 00 	call	0x10c	; 0x10c <App_TurnOn_5S_2blinkLeds>
			HLED_LedOff(&PEDRedLed);
 350:	88 e6       	ldi	r24, 0x68	; 104
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 f7 01 	call	0x3ee	; 0x3ee <HLED_LedOff>
			HLED_LedOn(&PEDGreenLed);
 358:	8c e6       	ldi	r24, 0x6C	; 108
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 ef 01 	call	0x3de	; 0x3de <HLED_LedOn>
			App_TurnOn5SLed(CarsRedLed);
 360:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <CarsRedLed>
 364:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <CarsRedLed+0x1>
 368:	0e 94 3e 00 	call	0x7c	; 0x7c <App_TurnOn5SLed>
			HLED_LedOff(&CarsRedLed);
 36c:	8a e6       	ldi	r24, 0x6A	; 106
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 f7 01 	call	0x3ee	; 0x3ee <HLED_LedOff>
			App_TurnOn_5S_2blinkLeds(CarsYellowLed,PEDYellowLed);
 374:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <PEDYellowLed>
 378:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <PEDYellowLed+0x1>
 37c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <CarsYellowLed>
 380:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <CarsYellowLed+0x1>
 384:	0e 94 86 00 	call	0x10c	; 0x10c <App_TurnOn_5S_2blinkLeds>
			HLED_LedOff(&PEDGreenLed);
 388:	8c e6       	ldi	r24, 0x6C	; 108
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <HLED_LedOff>
			HLED_LedOn(&CarsGreenLed);
 390:	86 e6       	ldi	r24, 0x66	; 102
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 ef 01 	call	0x3de	; 0x3de <HLED_LedOn>
			App_TurnOn5S_blinkLed(PEDYellowLed);
 398:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PEDYellowLed>
 39c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <PEDYellowLed+0x1>
 3a0:	0e 94 5a 00 	call	0xb4	; 0xb4 <App_TurnOn5S_blinkLed>
			HLED_LedOff(&CarsGreenLed);
 3a4:	86 e6       	ldi	r24, 0x66	; 102
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 f7 01 	call	0x3ee	; 0x3ee <HLED_LedOff>
	}
	
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <HLED_voidInit>:



state HLED_voidInit (LED_t *Led) // led initilization
{
	MDIO_voidInit(Led->port,Led->pin,OUTPUT);
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	fc 01       	movw	r30, r24
 3d2:	61 81       	ldd	r22, Z+1	; 0x01
 3d4:	80 81       	ld	r24, Z
 3d6:	0e 94 04 02 	call	0x408	; 0x408 <MDIO_voidInit>
	return works;
}
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	08 95       	ret

000003de <HLED_LedOn>:
state HLED_LedOn (LED_t *Led) // opening the led
{
	MDIO_voidWrite(Led->port,Led->pin,HIGH);
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	fc 01       	movw	r30, r24
 3e2:	61 81       	ldd	r22, Z+1	; 0x01
 3e4:	80 81       	ld	r24, Z
 3e6:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <MDIO_voidWrite>
	return works;
}
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	08 95       	ret

000003ee <HLED_LedOff>:
state HLED_LedOff (LED_t *Led) // closing the led
{
	MDIO_voidWrite(Led->port,Led->pin,LOW);
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	fc 01       	movw	r30, r24
 3f2:	61 81       	ldd	r22, Z+1	; 0x01
 3f4:	80 81       	ld	r24, Z
 3f6:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <MDIO_voidWrite>
	return works;
}
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	08 95       	ret

000003fe <main>:
		
	}*/

int main()
{
	AppStart();
 3fe:	0e 94 bf 00 	call	0x17e	; 0x17e <AppStart>
}
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	08 95       	ret

00000408 <MDIO_voidInit>:
		break;
		case PORT_D:
			*Value = Get_Bit(PIND,PinNumber); 		//(PIND &(1<<PinNumber)) >>PinNumber;  														
		break;
}return works;
}
 408:	68 30       	cpi	r22, 0x08	; 8
 40a:	08 f0       	brcs	.+2      	; 0x40e <MDIO_voidInit+0x6>
 40c:	cd c0       	rjmp	.+410    	; 0x5a8 <MDIO_voidInit+0x1a0>
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	c9 f1       	breq	.+114    	; 0x484 <MDIO_voidInit+0x7c>
 412:	38 f0       	brcs	.+14     	; 0x422 <MDIO_voidInit+0x1a>
 414:	82 30       	cpi	r24, 0x02	; 2
 416:	09 f4       	brne	.+2      	; 0x41a <MDIO_voidInit+0x12>
 418:	66 c0       	rjmp	.+204    	; 0x4e6 <MDIO_voidInit+0xde>
 41a:	83 30       	cpi	r24, 0x03	; 3
 41c:	09 f4       	brne	.+2      	; 0x420 <MDIO_voidInit+0x18>
 41e:	94 c0       	rjmp	.+296    	; 0x548 <MDIO_voidInit+0x140>
 420:	c5 c0       	rjmp	.+394    	; 0x5ac <MDIO_voidInit+0x1a4>
 422:	41 30       	cpi	r20, 0x01	; 1
 424:	61 f4       	brne	.+24     	; 0x43e <MDIO_voidInit+0x36>
 426:	2a b3       	in	r18, 0x1a	; 26
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <MDIO_voidInit+0x2a>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <MDIO_voidInit+0x26>
 436:	82 2b       	or	r24, r18
 438:	8a bb       	out	0x1a, r24	; 26
 43a:	83 e0       	ldi	r24, 0x03	; 3
 43c:	08 95       	ret
 43e:	41 11       	cpse	r20, r1
 440:	0d c0       	rjmp	.+26     	; 0x45c <MDIO_voidInit+0x54>
 442:	2a b3       	in	r18, 0x1a	; 26
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <MDIO_voidInit+0x46>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	6a 95       	dec	r22
 450:	e2 f7       	brpl	.-8      	; 0x44a <MDIO_voidInit+0x42>
 452:	80 95       	com	r24
 454:	82 23       	and	r24, r18
 456:	8a bb       	out	0x1a, r24	; 26
 458:	83 e0       	ldi	r24, 0x03	; 3
 45a:	08 95       	ret
 45c:	42 30       	cpi	r20, 0x02	; 2
 45e:	09 f0       	breq	.+2      	; 0x462 <MDIO_voidInit+0x5a>
 460:	a7 c0       	rjmp	.+334    	; 0x5b0 <MDIO_voidInit+0x1a8>
 462:	2a b3       	in	r18, 0x1a	; 26
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <MDIO_voidInit+0x66>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	6a 95       	dec	r22
 470:	e2 f7       	brpl	.-8      	; 0x46a <MDIO_voidInit+0x62>
 472:	98 2f       	mov	r25, r24
 474:	90 95       	com	r25
 476:	92 23       	and	r25, r18
 478:	9a bb       	out	0x1a, r25	; 26
 47a:	9b b3       	in	r25, 0x1b	; 27
 47c:	89 2b       	or	r24, r25
 47e:	8b bb       	out	0x1b, r24	; 27
 480:	83 e0       	ldi	r24, 0x03	; 3
 482:	08 95       	ret
 484:	41 30       	cpi	r20, 0x01	; 1
 486:	61 f4       	brne	.+24     	; 0x4a0 <MDIO_voidInit+0x98>
 488:	27 b3       	in	r18, 0x17	; 23
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	02 c0       	rjmp	.+4      	; 0x494 <MDIO_voidInit+0x8c>
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <MDIO_voidInit+0x88>
 498:	82 2b       	or	r24, r18
 49a:	87 bb       	out	0x17, r24	; 23
 49c:	83 e0       	ldi	r24, 0x03	; 3
 49e:	08 95       	ret
 4a0:	41 11       	cpse	r20, r1
 4a2:	0d c0       	rjmp	.+26     	; 0x4be <MDIO_voidInit+0xb6>
 4a4:	27 b3       	in	r18, 0x17	; 23
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <MDIO_voidInit+0xa8>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <MDIO_voidInit+0xa4>
 4b4:	80 95       	com	r24
 4b6:	82 23       	and	r24, r18
 4b8:	87 bb       	out	0x17, r24	; 23
 4ba:	83 e0       	ldi	r24, 0x03	; 3
 4bc:	08 95       	ret
 4be:	42 30       	cpi	r20, 0x02	; 2
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <MDIO_voidInit+0xbc>
 4c2:	78 c0       	rjmp	.+240    	; 0x5b4 <MDIO_voidInit+0x1ac>
 4c4:	27 b3       	in	r18, 0x17	; 23
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <MDIO_voidInit+0xc8>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	6a 95       	dec	r22
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <MDIO_voidInit+0xc4>
 4d4:	98 2f       	mov	r25, r24
 4d6:	90 95       	com	r25
 4d8:	92 23       	and	r25, r18
 4da:	97 bb       	out	0x17, r25	; 23
 4dc:	98 b3       	in	r25, 0x18	; 24
 4de:	89 2b       	or	r24, r25
 4e0:	88 bb       	out	0x18, r24	; 24
 4e2:	83 e0       	ldi	r24, 0x03	; 3
 4e4:	08 95       	ret
 4e6:	41 30       	cpi	r20, 0x01	; 1
 4e8:	61 f4       	brne	.+24     	; 0x502 <MDIO_voidInit+0xfa>
 4ea:	24 b3       	in	r18, 0x14	; 20
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <MDIO_voidInit+0xee>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <MDIO_voidInit+0xea>
 4fa:	82 2b       	or	r24, r18
 4fc:	84 bb       	out	0x14, r24	; 20
 4fe:	83 e0       	ldi	r24, 0x03	; 3
 500:	08 95       	ret
 502:	41 11       	cpse	r20, r1
 504:	0d c0       	rjmp	.+26     	; 0x520 <MDIO_voidInit+0x118>
 506:	24 b3       	in	r18, 0x14	; 20
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <MDIO_voidInit+0x10a>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	6a 95       	dec	r22
 514:	e2 f7       	brpl	.-8      	; 0x50e <MDIO_voidInit+0x106>
 516:	80 95       	com	r24
 518:	82 23       	and	r24, r18
 51a:	84 bb       	out	0x14, r24	; 20
 51c:	83 e0       	ldi	r24, 0x03	; 3
 51e:	08 95       	ret
 520:	42 30       	cpi	r20, 0x02	; 2
 522:	09 f0       	breq	.+2      	; 0x526 <MDIO_voidInit+0x11e>
 524:	49 c0       	rjmp	.+146    	; 0x5b8 <MDIO_voidInit+0x1b0>
 526:	24 b3       	in	r18, 0x14	; 20
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <MDIO_voidInit+0x12a>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	6a 95       	dec	r22
 534:	e2 f7       	brpl	.-8      	; 0x52e <MDIO_voidInit+0x126>
 536:	98 2f       	mov	r25, r24
 538:	90 95       	com	r25
 53a:	92 23       	and	r25, r18
 53c:	94 bb       	out	0x14, r25	; 20
 53e:	95 b3       	in	r25, 0x15	; 21
 540:	89 2b       	or	r24, r25
 542:	85 bb       	out	0x15, r24	; 21
 544:	83 e0       	ldi	r24, 0x03	; 3
 546:	08 95       	ret
 548:	41 30       	cpi	r20, 0x01	; 1
 54a:	61 f4       	brne	.+24     	; 0x564 <MDIO_voidInit+0x15c>
 54c:	21 b3       	in	r18, 0x11	; 17
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <MDIO_voidInit+0x150>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <MDIO_voidInit+0x14c>
 55c:	82 2b       	or	r24, r18
 55e:	81 bb       	out	0x11, r24	; 17
 560:	83 e0       	ldi	r24, 0x03	; 3
 562:	08 95       	ret
 564:	41 11       	cpse	r20, r1
 566:	0d c0       	rjmp	.+26     	; 0x582 <MDIO_voidInit+0x17a>
 568:	21 b3       	in	r18, 0x11	; 17
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <MDIO_voidInit+0x16c>
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	6a 95       	dec	r22
 576:	e2 f7       	brpl	.-8      	; 0x570 <MDIO_voidInit+0x168>
 578:	80 95       	com	r24
 57a:	82 23       	and	r24, r18
 57c:	81 bb       	out	0x11, r24	; 17
 57e:	83 e0       	ldi	r24, 0x03	; 3
 580:	08 95       	ret
 582:	42 30       	cpi	r20, 0x02	; 2
 584:	d9 f4       	brne	.+54     	; 0x5bc <MDIO_voidInit+0x1b4>
 586:	21 b3       	in	r18, 0x11	; 17
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <MDIO_voidInit+0x18a>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <MDIO_voidInit+0x186>
 596:	98 2f       	mov	r25, r24
 598:	90 95       	com	r25
 59a:	92 23       	and	r25, r18
 59c:	91 bb       	out	0x11, r25	; 17
 59e:	92 b3       	in	r25, 0x12	; 18
 5a0:	89 2b       	or	r24, r25
 5a2:	82 bb       	out	0x12, r24	; 18
 5a4:	83 e0       	ldi	r24, 0x03	; 3
 5a6:	08 95       	ret
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	08 95       	ret
 5ac:	83 e0       	ldi	r24, 0x03	; 3
 5ae:	08 95       	ret
 5b0:	83 e0       	ldi	r24, 0x03	; 3
 5b2:	08 95       	ret
 5b4:	83 e0       	ldi	r24, 0x03	; 3
 5b6:	08 95       	ret
 5b8:	83 e0       	ldi	r24, 0x03	; 3
 5ba:	08 95       	ret
 5bc:	83 e0       	ldi	r24, 0x03	; 3
 5be:	08 95       	ret

000005c0 <MDIO_voidWrite>:
 5c0:	69 30       	cpi	r22, 0x09	; 9
 5c2:	08 f0       	brcs	.+2      	; 0x5c6 <MDIO_voidWrite+0x6>
 5c4:	80 c0       	rjmp	.+256    	; 0x6c6 <MDIO_voidWrite+0x106>
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	31 f1       	breq	.+76     	; 0x616 <MDIO_voidWrite+0x56>
 5ca:	38 f0       	brcs	.+14     	; 0x5da <MDIO_voidWrite+0x1a>
 5cc:	82 30       	cpi	r24, 0x02	; 2
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <MDIO_voidWrite+0x12>
 5d0:	40 c0       	rjmp	.+128    	; 0x652 <MDIO_voidWrite+0x92>
 5d2:	83 30       	cpi	r24, 0x03	; 3
 5d4:	09 f4       	brne	.+2      	; 0x5d8 <MDIO_voidWrite+0x18>
 5d6:	5a c0       	rjmp	.+180    	; 0x68c <MDIO_voidWrite+0xcc>
 5d8:	78 c0       	rjmp	.+240    	; 0x6ca <MDIO_voidWrite+0x10a>
 5da:	41 11       	cpse	r20, r1
 5dc:	0d c0       	rjmp	.+26     	; 0x5f8 <MDIO_voidWrite+0x38>
 5de:	2b b3       	in	r18, 0x1b	; 27
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <MDIO_voidWrite+0x2a>
 5e6:	88 0f       	add	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	6a 95       	dec	r22
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <MDIO_voidWrite+0x26>
 5ee:	80 95       	com	r24
 5f0:	82 23       	and	r24, r18
 5f2:	8b bb       	out	0x1b, r24	; 27
 5f4:	83 e0       	ldi	r24, 0x03	; 3
 5f6:	08 95       	ret
 5f8:	41 30       	cpi	r20, 0x01	; 1
 5fa:	09 f0       	breq	.+2      	; 0x5fe <MDIO_voidWrite+0x3e>
 5fc:	68 c0       	rjmp	.+208    	; 0x6ce <MDIO_voidWrite+0x10e>
 5fe:	2b b3       	in	r18, 0x1b	; 27
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <MDIO_voidWrite+0x4a>
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	6a 95       	dec	r22
 60c:	e2 f7       	brpl	.-8      	; 0x606 <MDIO_voidWrite+0x46>
 60e:	82 2b       	or	r24, r18
 610:	8b bb       	out	0x1b, r24	; 27
 612:	83 e0       	ldi	r24, 0x03	; 3
 614:	08 95       	ret
 616:	41 11       	cpse	r20, r1
 618:	0d c0       	rjmp	.+26     	; 0x634 <MDIO_voidWrite+0x74>
 61a:	28 b3       	in	r18, 0x18	; 24
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 c0       	rjmp	.+4      	; 0x626 <MDIO_voidWrite+0x66>
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	6a 95       	dec	r22
 628:	e2 f7       	brpl	.-8      	; 0x622 <MDIO_voidWrite+0x62>
 62a:	80 95       	com	r24
 62c:	82 23       	and	r24, r18
 62e:	88 bb       	out	0x18, r24	; 24
 630:	83 e0       	ldi	r24, 0x03	; 3
 632:	08 95       	ret
 634:	41 30       	cpi	r20, 0x01	; 1
 636:	09 f0       	breq	.+2      	; 0x63a <MDIO_voidWrite+0x7a>
 638:	4c c0       	rjmp	.+152    	; 0x6d2 <MDIO_voidWrite+0x112>
 63a:	28 b3       	in	r18, 0x18	; 24
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <MDIO_voidWrite+0x86>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <MDIO_voidWrite+0x82>
 64a:	82 2b       	or	r24, r18
 64c:	88 bb       	out	0x18, r24	; 24
 64e:	83 e0       	ldi	r24, 0x03	; 3
 650:	08 95       	ret
 652:	41 11       	cpse	r20, r1
 654:	0d c0       	rjmp	.+26     	; 0x670 <MDIO_voidWrite+0xb0>
 656:	25 b3       	in	r18, 0x15	; 21
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	02 c0       	rjmp	.+4      	; 0x662 <MDIO_voidWrite+0xa2>
 65e:	88 0f       	add	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	6a 95       	dec	r22
 664:	e2 f7       	brpl	.-8      	; 0x65e <MDIO_voidWrite+0x9e>
 666:	80 95       	com	r24
 668:	82 23       	and	r24, r18
 66a:	85 bb       	out	0x15, r24	; 21
 66c:	83 e0       	ldi	r24, 0x03	; 3
 66e:	08 95       	ret
 670:	41 30       	cpi	r20, 0x01	; 1
 672:	89 f5       	brne	.+98     	; 0x6d6 <MDIO_voidWrite+0x116>
 674:	25 b3       	in	r18, 0x15	; 21
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	02 c0       	rjmp	.+4      	; 0x680 <MDIO_voidWrite+0xc0>
 67c:	88 0f       	add	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	6a 95       	dec	r22
 682:	e2 f7       	brpl	.-8      	; 0x67c <MDIO_voidWrite+0xbc>
 684:	82 2b       	or	r24, r18
 686:	85 bb       	out	0x15, r24	; 21
 688:	83 e0       	ldi	r24, 0x03	; 3
 68a:	08 95       	ret
 68c:	41 11       	cpse	r20, r1
 68e:	0d c0       	rjmp	.+26     	; 0x6aa <MDIO_voidWrite+0xea>
 690:	22 b3       	in	r18, 0x12	; 18
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	02 c0       	rjmp	.+4      	; 0x69c <MDIO_voidWrite+0xdc>
 698:	88 0f       	add	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	6a 95       	dec	r22
 69e:	e2 f7       	brpl	.-8      	; 0x698 <MDIO_voidWrite+0xd8>
 6a0:	80 95       	com	r24
 6a2:	82 23       	and	r24, r18
 6a4:	82 bb       	out	0x12, r24	; 18
 6a6:	83 e0       	ldi	r24, 0x03	; 3
 6a8:	08 95       	ret
 6aa:	41 30       	cpi	r20, 0x01	; 1
 6ac:	b1 f4       	brne	.+44     	; 0x6da <MDIO_voidWrite+0x11a>
 6ae:	22 b3       	in	r18, 0x12	; 18
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <MDIO_voidWrite+0xfa>
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	6a 95       	dec	r22
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <MDIO_voidWrite+0xf6>
 6be:	82 2b       	or	r24, r18
 6c0:	82 bb       	out	0x12, r24	; 18
 6c2:	83 e0       	ldi	r24, 0x03	; 3
 6c4:	08 95       	ret
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	08 95       	ret
 6ca:	83 e0       	ldi	r24, 0x03	; 3
 6cc:	08 95       	ret
 6ce:	83 e0       	ldi	r24, 0x03	; 3
 6d0:	08 95       	ret
 6d2:	83 e0       	ldi	r24, 0x03	; 3
 6d4:	08 95       	ret
 6d6:	83 e0       	ldi	r24, 0x03	; 3
 6d8:	08 95       	ret
 6da:	83 e0       	ldi	r24, 0x03	; 3
 6dc:	08 95       	ret

000006de <MDIO_GetPinValue>:



uint8_t MDIO_GetPinValue(enum DIOPORT_t PortNumber, uint8_t PinNumber)	// reading the value of the pin with the return value
{
	switch (PortNumber)
 6de:	81 30       	cpi	r24, 0x01	; 1
 6e0:	79 f0       	breq	.+30     	; 0x700 <MDIO_GetPinValue+0x22>
 6e2:	28 f0       	brcs	.+10     	; 0x6ee <MDIO_GetPinValue+0x10>
 6e4:	82 30       	cpi	r24, 0x02	; 2
 6e6:	a9 f0       	breq	.+42     	; 0x712 <MDIO_GetPinValue+0x34>
 6e8:	83 30       	cpi	r24, 0x03	; 3
 6ea:	e1 f0       	breq	.+56     	; 0x724 <MDIO_GetPinValue+0x46>
 6ec:	24 c0       	rjmp	.+72     	; 0x736 <MDIO_GetPinValue+0x58>
	{
		case PORT_A:
		return Get_Bit(PINA, PinNumber);
 6ee:	89 b3       	in	r24, 0x19	; 25
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <MDIO_GetPinValue+0x1a>
 6f4:	95 95       	asr	r25
 6f6:	87 95       	ror	r24
 6f8:	6a 95       	dec	r22
 6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <MDIO_GetPinValue+0x16>
 6fc:	81 70       	andi	r24, 0x01	; 1
 6fe:	08 95       	ret
		break;

		case PORT_B:
		return Get_Bit(PINB, PinNumber);
 700:	86 b3       	in	r24, 0x16	; 22
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	02 c0       	rjmp	.+4      	; 0x70a <MDIO_GetPinValue+0x2c>
 706:	95 95       	asr	r25
 708:	87 95       	ror	r24
 70a:	6a 95       	dec	r22
 70c:	e2 f7       	brpl	.-8      	; 0x706 <MDIO_GetPinValue+0x28>
 70e:	81 70       	andi	r24, 0x01	; 1
 710:	08 95       	ret
		break;

		case PORT_C:
		return Get_Bit(PINC, PinNumber);
 712:	83 b3       	in	r24, 0x13	; 19
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	02 c0       	rjmp	.+4      	; 0x71c <MDIO_GetPinValue+0x3e>
 718:	95 95       	asr	r25
 71a:	87 95       	ror	r24
 71c:	6a 95       	dec	r22
 71e:	e2 f7       	brpl	.-8      	; 0x718 <MDIO_GetPinValue+0x3a>
 720:	81 70       	andi	r24, 0x01	; 1
 722:	08 95       	ret
		break;

		case PORT_D:
		return Get_Bit(PIND, PinNumber);
 724:	80 b3       	in	r24, 0x10	; 16
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	02 c0       	rjmp	.+4      	; 0x72e <MDIO_GetPinValue+0x50>
 72a:	95 95       	asr	r25
 72c:	87 95       	ror	r24
 72e:	6a 95       	dec	r22
 730:	e2 f7       	brpl	.-8      	; 0x72a <MDIO_GetPinValue+0x4c>
 732:	81 70       	andi	r24, 0x01	; 1
 734:	08 95       	ret
		break;

	}
	return 0;
 736:	80 e0       	ldi	r24, 0x00	; 0
}
 738:	08 95       	ret

0000073a <MINTERRUPT_voidEnableExternalInterrupt>:
			break;
		default:
			return works;
	}
	return works;
}
 73a:	88 23       	and	r24, r24
 73c:	19 f0       	breq	.+6      	; 0x744 <MINTERRUPT_voidEnableExternalInterrupt+0xa>
 73e:	81 30       	cpi	r24, 0x01	; 1
 740:	29 f0       	breq	.+10     	; 0x74c <MINTERRUPT_voidEnableExternalInterrupt+0x12>
 742:	0a c0       	rjmp	.+20     	; 0x758 <MINTERRUPT_voidEnableExternalInterrupt+0x1e>
 744:	8b b7       	in	r24, 0x3b	; 59
 746:	80 64       	ori	r24, 0x40	; 64
 748:	8b bf       	out	0x3b, r24	; 59
 74a:	03 c0       	rjmp	.+6      	; 0x752 <MINTERRUPT_voidEnableExternalInterrupt+0x18>
 74c:	8b b7       	in	r24, 0x3b	; 59
 74e:	80 68       	ori	r24, 0x80	; 128
 750:	8b bf       	out	0x3b, r24	; 59
 752:	8f b7       	in	r24, 0x3f	; 63
 754:	80 68       	ori	r24, 0x80	; 128
 756:	8f bf       	out	0x3f, r24	; 63
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	08 95       	ret

0000075c <MINTERRUPT_voidExternal_Interrupt_SetTrigger>:
state MINTERRUPT_voidExternal_Interrupt_SetTrigger(enum INTERRUPT_EXTERNAL_TYPE Interrupt, enum INTERRUPT_TEXTERNAL_TRIGGER Trigger )
{
	
	switch(Interrupt){
 75c:	88 23       	and	r24, r24
 75e:	19 f0       	breq	.+6      	; 0x766 <MINTERRUPT_voidExternal_Interrupt_SetTrigger+0xa>
 760:	81 30       	cpi	r24, 0x01	; 1
 762:	41 f0       	breq	.+16     	; 0x774 <MINTERRUPT_voidExternal_Interrupt_SetTrigger+0x18>
 764:	0d c0       	rjmp	.+26     	; 0x780 <MINTERRUPT_voidExternal_Interrupt_SetTrigger+0x24>
		//FOLLOWING THE INSTRUCTIONS IN THE DATA SHEET
		case EXTERNAL_INT_LINE0:
			MCUCR &= ~3; // 3 in binary is 00000011 and ~3 is 11111100 this way we can clear the first 2 bits in one step
 766:	85 b7       	in	r24, 0x35	; 53
 768:	8c 7f       	andi	r24, 0xFC	; 252
 76a:	85 bf       	out	0x35, r24	; 53
			MCUCR |= Trigger;///
 76c:	85 b7       	in	r24, 0x35	; 53
 76e:	68 2b       	or	r22, r24
 770:	65 bf       	out	0x35, r22	; 53
		break;
 772:	06 c0       	rjmp	.+12     	; 0x780 <MINTERRUPT_voidExternal_Interrupt_SetTrigger+0x24>
		
		case EXTERNAL_INT_LINE1:
			MCUCR &= ~12; // 12 in binary is 00001100 this way we can set the required bits in one step
 774:	85 b7       	in	r24, 0x35	; 53
 776:	83 7f       	andi	r24, 0xF3	; 243
 778:	85 bf       	out	0x35, r24	; 53
			MCUCR |= Trigger;
 77a:	85 b7       	in	r24, 0x35	; 53
 77c:	68 2b       	or	r22, r24
 77e:	65 bf       	out	0x35, r22	; 53
		
		default:
		break;
	}
	return works;
}
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	08 95       	ret

00000784 <MTimer0_init>:

EN_TIMER_error_t MTimer0_init(uint8_t InitValue ) // initiate Timer0
{
	if (InitValue >255 || InitValue < 0) // in case of error input
	return TIMER_WRONG_INIT_VALUE;
	TCCR0 = 0x00 ; //Normal mode
 784:	13 be       	out	0x33, r1	; 51
	TCNT0 = InitValue ; //Timer set initial value 
 786:	82 bf       	out	0x32, r24	; 50
	return TIMER_OK;
}
 788:	82 e0       	ldi	r24, 0x02	; 2
 78a:	08 95       	ret

0000078c <MTimer0_Delay_14_equal_second>:
EN_TIMER_error_t MTimer0_Delay_14_equal_second(uint16_t NUMBER_OF_OVERFLOWS )
{
 78c:	ac 01       	movw	r20, r24
	if (NUMBER_OF_OVERFLOWS < 0) // in case of error input
	return TIMER_WRONG_NO_OF_OVERFLOWS;
	
	//Timer Start -> Setting the clock source
	TCCR0 |= TIMER0_PRESCALER256; 
 78e:	83 b7       	in	r24, 0x33	; 51
 790:	84 60       	ori	r24, 0x04	; 4
 792:	83 bf       	out	0x33, r24	; 51
	while (overflowCounter < NUMBER_OF_OVERFLOWS)
 794:	10 c0       	rjmp	.+32     	; 0x7b6 <MTimer0_Delay_14_equal_second+0x2a>
	{
		// wait until the overflow flag to be set
		while ((TIFR & 1) ==0)
 796:	08 b6       	in	r0, 0x38	; 56
 798:	00 fe       	sbrs	r0, 0
 79a:	fd cf       	rjmp	.-6      	; 0x796 <MTimer0_Delay_14_equal_second+0xa>
	{}
		//clear the overflow flag
		TIFR |= 1;
 79c:	98 b7       	in	r25, 0x38	; 56
 79e:	91 60       	ori	r25, 0x01	; 1
 7a0:	98 bf       	out	0x38, r25	; 56
		overflowCounter++;
 7a2:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <overflowCounter>
 7a6:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <overflowCounter+0x1>
 7aa:	2f 5f       	subi	r18, 0xFF	; 255
 7ac:	3f 4f       	sbci	r19, 0xFF	; 255
 7ae:	30 93 62 00 	sts	0x0062, r19	; 0x800062 <overflowCounter+0x1>
 7b2:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <overflowCounter>
	if (NUMBER_OF_OVERFLOWS < 0) // in case of error input
	return TIMER_WRONG_NO_OF_OVERFLOWS;
	
	//Timer Start -> Setting the clock source
	TCCR0 |= TIMER0_PRESCALER256; 
	while (overflowCounter < NUMBER_OF_OVERFLOWS)
 7b6:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <overflowCounter>
 7ba:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <overflowCounter+0x1>
 7be:	24 17       	cp	r18, r20
 7c0:	35 07       	cpc	r19, r21
 7c2:	48 f3       	brcs	.-46     	; 0x796 <MTimer0_Delay_14_equal_second+0xa>
	{}
		//clear the overflow flag
		TIFR |= 1;
		overflowCounter++;
	}
	overflowCounter =0;
 7c4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflowCounter+0x1>
 7c8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <overflowCounter>
	//Timer stop
	TCCR0 = 0x00;
 7cc:	13 be       	out	0x33, r1	; 51
	return TIMER_OK;
}
 7ce:	82 e0       	ldi	r24, 0x02	; 2
 7d0:	08 95       	ret

000007d2 <_exit>:
 7d2:	f8 94       	cli

000007d4 <__stop_program>:
 7d4:	ff cf       	rjmp	.-2      	; 0x7d4 <__stop_program>
